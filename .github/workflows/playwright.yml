name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run regression tests every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - manual
      browser:
        description: 'Browser to test on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

jobs:
  # Manual triggered tests
  manual-tests:
    name: Manual Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'manual'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Manual Tests
      run: npx playwright test --project=${{ matrix.browser }} --reporter=list
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: manual-test-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7

  # Smoke tests - quick validation of critical functionality
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'smoke' ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Smoke Tests
      run: npm run test:smoke -- --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7

  # Regression tests - comprehensive test suite
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'regression' ||
      github.event_name == 'schedule' ||
      github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Regression Tests
      run: npm run test:regression -- --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-test-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  # Code quality checks
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check Prettier formatting
      run: npx prettier --check .

  # Test results aggregation and reporting
  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, manual-tests]
    if: always() && (needs.smoke-tests.result != 'skipped' || needs.regression-tests.result != 'skipped' || needs.manual-tests.result != 'skipped')

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: playwright-report/

    - name: Merge reports
      run: npx playwright merge-reports ./playwright-report/
      continue-on-error: true

    - name: Upload merged report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: playwright-report/
        retention-days: 30

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          const resultsPath = path.join(process.cwd(), 'playwright-report', 'report.json');
          if (fs.existsSync(resultsPath)) {
            const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
            
            const summary = {
              total: results.suites.length,
              passed: results.suites.filter(s => s.specs.every(spec => spec.tests.every(test => test.results.every(r => r.status === 'passed')))).length,
              failed: results.suites.filter(s => s.specs.some(spec => spec.tests.some(test => test.results.some(r => r.status === 'failed')))).length,
            };
            
            const comment = `## üß™ Playwright Test Results
            
            **Summary:**
            - ‚úÖ Passed: ${summary.passed}
            - ‚ùå Failed: ${summary.failed}
            - üìä Total: ${summary.total}
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Scheduled regression tests (Monday at 2 AM UTC)
  scheduled-regression:
    name: Scheduled Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Scheduled Regression Tests
      run: npm run test:regression -- --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload scheduled test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scheduled-regression-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Scheduled Regression Tests Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `Scheduled regression tests failed on ${new Date().toISOString()}.
            
            **Browser:** ${{ matrix.browser }}
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            
            Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
          }); 